// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "Structures.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message UnionCmdNotify
 */
export interface UnionCmdNotify {
    /**
     * @generated from protobuf field: repeated Packet packets = 1;
     */
    packets: Packet[];
}
/**
 * @generated from protobuf message Packet
 */
export interface Packet {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: bytes data = 2;
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf message World
 */
export interface World {
    /**
     * @generated from protobuf field: repeated Player players = 1;
     */
    players: Player[];
    /**
     * @generated from protobuf field: repeated Chunk chunks = 2;
     */
    chunks: Chunk[];
}
/**
 * @generated from protobuf message Player
 */
export interface Player {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: Vector3 position = 3;
     */
    position?: Vector3;
    /**
     * @generated from protobuf field: Vector3 rotation = 4;
     */
    rotation?: Vector3;
    /**
     * @generated from protobuf field: Attributes attributes = 5;
     */
    attributes?: Attributes;
    /**
     * @generated from protobuf field: Inventory inventory = 6;
     */
    inventory?: Inventory;
}
/**
 * @generated from protobuf message Vector3
 */
export interface Vector3 {
    /**
     * @generated from protobuf field: float x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: float y = 2;
     */
    y: number;
    /**
     * @generated from protobuf field: float z = 3;
     */
    z: number;
}
/**
 * @generated from protobuf message Attributes
 */
export interface Attributes {
    /**
     * @generated from protobuf field: float health = 1;
     */
    health: number;
    /**
     * @generated from protobuf field: float hunger = 2;
     */
    hunger: number;
    /**
     * @generated from protobuf field: float armor = 3;
     */
    armor: number;
    /**
     * @generated from protobuf field: float xp_level = 4;
     */
    xpLevel: number;
    /**
     * @generated from protobuf field: uint32 xp_progress = 5;
     */
    xpProgress: number;
}
/**
 * @generated from protobuf message Item
 */
export interface Item {
    /**
     * @generated from protobuf field: string item_id = 1;
     */
    itemId: string;
    /**
     * @generated from protobuf field: uint32 quantity = 2;
     */
    quantity: number;
    /**
     * @generated from protobuf field: uint32 durability = 3;
     */
    durability: number;
}
/**
 * @generated from protobuf message Inventory
 */
export interface Inventory {
    /**
     * @generated from protobuf field: repeated Item items = 1;
     */
    items: Item[];
    /**
     * @generated from protobuf field: repeated Item hotbar = 2;
     */
    hotbar: Item[];
    /**
     * @generated from protobuf field: Item helmet = 3;
     */
    helmet?: Item;
    /**
     * @generated from protobuf field: Item chestplate = 4;
     */
    chestplate?: Item;
    /**
     * @generated from protobuf field: Item leggings = 5;
     */
    leggings?: Item;
    /**
     * @generated from protobuf field: Item boots = 6;
     */
    boots?: Item;
    /**
     * @generated from protobuf field: Item offhand = 7;
     */
    offhand?: Item;
}
/**
 * @generated from protobuf message Block
 */
export interface Block {
    /**
     * @generated from protobuf field: int32 x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: int32 y = 2;
     */
    y: number;
    /**
     * @generated from protobuf field: int32 z = 3;
     */
    z: number;
    /**
     * @generated from protobuf field: string block_id = 4;
     */
    blockId: string;
}
/**
 * @generated from protobuf message Chunk
 */
export interface Chunk {
    /**
     * @generated from protobuf field: int32 x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: int32 z = 2;
     */
    z: number;
    /**
     * @generated from protobuf field: repeated Block blocks = 3;
     */
    blocks: Block[];
}
// @generated message type with reflection information, may provide speed optimized methods
class UnionCmdNotify$Type extends MessageType<UnionCmdNotify> {
    constructor() {
        super("UnionCmdNotify", [
            { no: 1, name: "packets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Packet }
        ]);
    }
    create(value?: PartialMessage<UnionCmdNotify>): UnionCmdNotify {
        const message = { packets: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnionCmdNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnionCmdNotify): UnionCmdNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Packet packets */ 1:
                    message.packets.push(Packet.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnionCmdNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Packet packets = 1; */
        for (let i = 0; i < message.packets.length; i++)
            Packet.internalBinaryWrite(message.packets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UnionCmdNotify
 */
export const UnionCmdNotify = new UnionCmdNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Packet$Type extends MessageType<Packet> {
    constructor() {
        super("Packet", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Packet>): Packet {
        const message = { id: 0, data: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Packet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Packet): Packet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Packet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* bytes data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Packet
 */
export const Packet = new Packet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class World$Type extends MessageType<World> {
    constructor() {
        super("World", [
            { no: 1, name: "players", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Player },
            { no: 2, name: "chunks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Chunk }
        ]);
    }
    create(value?: PartialMessage<World>): World {
        const message = { players: [], chunks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<World>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: World): World {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Player players */ 1:
                    message.players.push(Player.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated Chunk chunks */ 2:
                    message.chunks.push(Chunk.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: World, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Player players = 1; */
        for (let i = 0; i < message.players.length; i++)
            Player.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Chunk chunks = 2; */
        for (let i = 0; i < message.chunks.length; i++)
            Chunk.internalBinaryWrite(message.chunks[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message World
 */
export const World = new World$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player$Type extends MessageType<Player> {
    constructor() {
        super("Player", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "position", kind: "message", T: () => Vector3 },
            { no: 4, name: "rotation", kind: "message", T: () => Vector3 },
            { no: 5, name: "attributes", kind: "message", T: () => Attributes },
            { no: 6, name: "inventory", kind: "message", T: () => Inventory }
        ]);
    }
    create(value?: PartialMessage<Player>): Player {
        const message = { id: "", name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Player>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player): Player {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* Vector3 position */ 3:
                    message.position = Vector3.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* Vector3 rotation */ 4:
                    message.rotation = Vector3.internalBinaryRead(reader, reader.uint32(), options, message.rotation);
                    break;
                case /* Attributes attributes */ 5:
                    message.attributes = Attributes.internalBinaryRead(reader, reader.uint32(), options, message.attributes);
                    break;
                case /* Inventory inventory */ 6:
                    message.inventory = Inventory.internalBinaryRead(reader, reader.uint32(), options, message.inventory);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* Vector3 position = 3; */
        if (message.position)
            Vector3.internalBinaryWrite(message.position, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Vector3 rotation = 4; */
        if (message.rotation)
            Vector3.internalBinaryWrite(message.rotation, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* Attributes attributes = 5; */
        if (message.attributes)
            Attributes.internalBinaryWrite(message.attributes, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* Inventory inventory = 6; */
        if (message.inventory)
            Inventory.internalBinaryWrite(message.inventory, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Player
 */
export const Player = new Player$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Vector3$Type extends MessageType<Vector3> {
    constructor() {
        super("Vector3", [
            { no: 1, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "z", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Vector3>): Vector3 {
        const message = { x: 0, y: 0, z: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Vector3>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Vector3): Vector3 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float x */ 1:
                    message.x = reader.float();
                    break;
                case /* float y */ 2:
                    message.y = reader.float();
                    break;
                case /* float z */ 3:
                    message.z = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Vector3, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float x = 1; */
        if (message.x !== 0)
            writer.tag(1, WireType.Bit32).float(message.x);
        /* float y = 2; */
        if (message.y !== 0)
            writer.tag(2, WireType.Bit32).float(message.y);
        /* float z = 3; */
        if (message.z !== 0)
            writer.tag(3, WireType.Bit32).float(message.z);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Vector3
 */
export const Vector3 = new Vector3$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Attributes$Type extends MessageType<Attributes> {
    constructor() {
        super("Attributes", [
            { no: 1, name: "health", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "hunger", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "armor", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "xp_level", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "xp_progress", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Attributes>): Attributes {
        const message = { health: 0, hunger: 0, armor: 0, xpLevel: 0, xpProgress: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Attributes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Attributes): Attributes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float health */ 1:
                    message.health = reader.float();
                    break;
                case /* float hunger */ 2:
                    message.hunger = reader.float();
                    break;
                case /* float armor */ 3:
                    message.armor = reader.float();
                    break;
                case /* float xp_level */ 4:
                    message.xpLevel = reader.float();
                    break;
                case /* uint32 xp_progress */ 5:
                    message.xpProgress = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Attributes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float health = 1; */
        if (message.health !== 0)
            writer.tag(1, WireType.Bit32).float(message.health);
        /* float hunger = 2; */
        if (message.hunger !== 0)
            writer.tag(2, WireType.Bit32).float(message.hunger);
        /* float armor = 3; */
        if (message.armor !== 0)
            writer.tag(3, WireType.Bit32).float(message.armor);
        /* float xp_level = 4; */
        if (message.xpLevel !== 0)
            writer.tag(4, WireType.Bit32).float(message.xpLevel);
        /* uint32 xp_progress = 5; */
        if (message.xpProgress !== 0)
            writer.tag(5, WireType.Varint).uint32(message.xpProgress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Attributes
 */
export const Attributes = new Attributes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Item$Type extends MessageType<Item> {
    constructor() {
        super("Item", [
            { no: 1, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "quantity", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "durability", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Item>): Item {
        const message = { itemId: "", quantity: 0, durability: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Item): Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_id */ 1:
                    message.itemId = reader.string();
                    break;
                case /* uint32 quantity */ 2:
                    message.quantity = reader.uint32();
                    break;
                case /* uint32 durability */ 3:
                    message.durability = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_id = 1; */
        if (message.itemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemId);
        /* uint32 quantity = 2; */
        if (message.quantity !== 0)
            writer.tag(2, WireType.Varint).uint32(message.quantity);
        /* uint32 durability = 3; */
        if (message.durability !== 0)
            writer.tag(3, WireType.Varint).uint32(message.durability);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Item
 */
export const Item = new Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Inventory$Type extends MessageType<Inventory> {
    constructor() {
        super("Inventory", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Item },
            { no: 2, name: "hotbar", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Item },
            { no: 3, name: "helmet", kind: "message", T: () => Item },
            { no: 4, name: "chestplate", kind: "message", T: () => Item },
            { no: 5, name: "leggings", kind: "message", T: () => Item },
            { no: 6, name: "boots", kind: "message", T: () => Item },
            { no: 7, name: "offhand", kind: "message", T: () => Item }
        ]);
    }
    create(value?: PartialMessage<Inventory>): Inventory {
        const message = { items: [], hotbar: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Inventory>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Inventory): Inventory {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Item items */ 1:
                    message.items.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated Item hotbar */ 2:
                    message.hotbar.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* Item helmet */ 3:
                    message.helmet = Item.internalBinaryRead(reader, reader.uint32(), options, message.helmet);
                    break;
                case /* Item chestplate */ 4:
                    message.chestplate = Item.internalBinaryRead(reader, reader.uint32(), options, message.chestplate);
                    break;
                case /* Item leggings */ 5:
                    message.leggings = Item.internalBinaryRead(reader, reader.uint32(), options, message.leggings);
                    break;
                case /* Item boots */ 6:
                    message.boots = Item.internalBinaryRead(reader, reader.uint32(), options, message.boots);
                    break;
                case /* Item offhand */ 7:
                    message.offhand = Item.internalBinaryRead(reader, reader.uint32(), options, message.offhand);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Inventory, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Item items = 1; */
        for (let i = 0; i < message.items.length; i++)
            Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Item hotbar = 2; */
        for (let i = 0; i < message.hotbar.length; i++)
            Item.internalBinaryWrite(message.hotbar[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Item helmet = 3; */
        if (message.helmet)
            Item.internalBinaryWrite(message.helmet, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Item chestplate = 4; */
        if (message.chestplate)
            Item.internalBinaryWrite(message.chestplate, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* Item leggings = 5; */
        if (message.leggings)
            Item.internalBinaryWrite(message.leggings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* Item boots = 6; */
        if (message.boots)
            Item.internalBinaryWrite(message.boots, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* Item offhand = 7; */
        if (message.offhand)
            Item.internalBinaryWrite(message.offhand, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Inventory
 */
export const Inventory = new Inventory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Block$Type extends MessageType<Block> {
    constructor() {
        super("Block", [
            { no: 1, name: "x", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "y", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "z", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "block_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Block>): Block {
        const message = { x: 0, y: 0, z: 0, blockId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Block>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Block): Block {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 x */ 1:
                    message.x = reader.int32();
                    break;
                case /* int32 y */ 2:
                    message.y = reader.int32();
                    break;
                case /* int32 z */ 3:
                    message.z = reader.int32();
                    break;
                case /* string block_id */ 4:
                    message.blockId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Block, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 x = 1; */
        if (message.x !== 0)
            writer.tag(1, WireType.Varint).int32(message.x);
        /* int32 y = 2; */
        if (message.y !== 0)
            writer.tag(2, WireType.Varint).int32(message.y);
        /* int32 z = 3; */
        if (message.z !== 0)
            writer.tag(3, WireType.Varint).int32(message.z);
        /* string block_id = 4; */
        if (message.blockId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.blockId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Block
 */
export const Block = new Block$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Chunk$Type extends MessageType<Chunk> {
    constructor() {
        super("Chunk", [
            { no: 1, name: "x", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "z", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "blocks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Block }
        ]);
    }
    create(value?: PartialMessage<Chunk>): Chunk {
        const message = { x: 0, z: 0, blocks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Chunk>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Chunk): Chunk {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 x */ 1:
                    message.x = reader.int32();
                    break;
                case /* int32 z */ 2:
                    message.z = reader.int32();
                    break;
                case /* repeated Block blocks */ 3:
                    message.blocks.push(Block.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Chunk, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 x = 1; */
        if (message.x !== 0)
            writer.tag(1, WireType.Varint).int32(message.x);
        /* int32 z = 2; */
        if (message.z !== 0)
            writer.tag(2, WireType.Varint).int32(message.z);
        /* repeated Block blocks = 3; */
        for (let i = 0; i < message.blocks.length; i++)
            Block.internalBinaryWrite(message.blocks[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Chunk
 */
export const Chunk = new Chunk$Type();
