// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "Service.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Player } from "./Structures";
/**
 * @generated from protobuf message ServiceJoinCsReq
 */
export interface ServiceJoinCsReq {
    /**
     * @generated from protobuf field: string server_address = 1;
     */
    serverAddress: string;
    /**
     * @generated from protobuf field: uint32 server_port = 2;
     */
    serverPort: number;
}
/**
 * @generated from protobuf message GetAllSessionsCsRsp
 */
export interface GetAllSessionsCsRsp {
    /**
     * @generated from protobuf field: repeated Player sessions = 1;
     */
    sessions: Player[];
}
/**
 * This should be relayed to all connected clients.
 *
 * @generated from protobuf message CreateSessionCsNotify
 */
export interface CreateSessionCsNotify {
    /**
     * @generated from protobuf field: Player session = 1;
     */
    session?: Player;
}
/**
 * This should be relayed to all connected clients.
 *
 * @generated from protobuf message DeleteSessionCsNotify
 */
export interface DeleteSessionCsNotify {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * This should be relayed to all connected clients.
 *
 * @generated from protobuf message UpdateSessionsCsNotify
 */
export interface UpdateSessionsCsNotify {
    /**
     * @generated from protobuf field: repeated Player sessions = 1;
     */
    sessions: Player[];
}
/**
 * @generated from protobuf message RequestSessionScNotify
 */
export interface RequestSessionScNotify {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: int64 lifetime = 2;
     */
    lifetime: bigint;
}
/**
 * @generated from protobuf enum ServiceIds
 */
export enum ServiceIds {
    /**
     * @generated from protobuf enum value: _ServiceJoinCsReq = 0;
     */
    _ServiceJoinCsReq = 0,
    /**
     * @generated from protobuf enum value: _ServiceJoinScRsp = 1;
     */
    _ServiceJoinScRsp = 1,
    /**
     * @generated from protobuf enum value: _GetAllSessionsScReq = 2;
     */
    _GetAllSessionsScReq = 2,
    /**
     * @generated from protobuf enum value: _GetAllSessionsCsRsp = 3;
     */
    _GetAllSessionsCsRsp = 3,
    /**
     * @generated from protobuf enum value: _CreateSessionCsNotify = 4;
     */
    _CreateSessionCsNotify = 4,
    /**
     * @generated from protobuf enum value: _DeleteSessionCsNotify = 5;
     */
    _DeleteSessionCsNotify = 5,
    /**
     * @generated from protobuf enum value: _UpdateSessionsCsNotify = 6;
     */
    _UpdateSessionsCsNotify = 6,
    /**
     * @generated from protobuf enum value: _RequestSessionScNotify = 7;
     */
    _RequestSessionScNotify = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class ServiceJoinCsReq$Type extends MessageType<ServiceJoinCsReq> {
    constructor() {
        super("ServiceJoinCsReq", [
            { no: 1, name: "server_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "server_port", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceJoinCsReq>): ServiceJoinCsReq {
        const message = { serverAddress: "", serverPort: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServiceJoinCsReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceJoinCsReq): ServiceJoinCsReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string server_address */ 1:
                    message.serverAddress = reader.string();
                    break;
                case /* uint32 server_port */ 2:
                    message.serverPort = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceJoinCsReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string server_address = 1; */
        if (message.serverAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serverAddress);
        /* uint32 server_port = 2; */
        if (message.serverPort !== 0)
            writer.tag(2, WireType.Varint).uint32(message.serverPort);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServiceJoinCsReq
 */
export const ServiceJoinCsReq = new ServiceJoinCsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllSessionsCsRsp$Type extends MessageType<GetAllSessionsCsRsp> {
    constructor() {
        super("GetAllSessionsCsRsp", [
            { no: 1, name: "sessions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Player }
        ]);
    }
    create(value?: PartialMessage<GetAllSessionsCsRsp>): GetAllSessionsCsRsp {
        const message = { sessions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllSessionsCsRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllSessionsCsRsp): GetAllSessionsCsRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Player sessions */ 1:
                    message.sessions.push(Player.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllSessionsCsRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Player sessions = 1; */
        for (let i = 0; i < message.sessions.length; i++)
            Player.internalBinaryWrite(message.sessions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetAllSessionsCsRsp
 */
export const GetAllSessionsCsRsp = new GetAllSessionsCsRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionCsNotify$Type extends MessageType<CreateSessionCsNotify> {
    constructor() {
        super("CreateSessionCsNotify", [
            { no: 1, name: "session", kind: "message", T: () => Player }
        ]);
    }
    create(value?: PartialMessage<CreateSessionCsNotify>): CreateSessionCsNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateSessionCsNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSessionCsNotify): CreateSessionCsNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Player session */ 1:
                    message.session = Player.internalBinaryRead(reader, reader.uint32(), options, message.session);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSessionCsNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Player session = 1; */
        if (message.session)
            Player.internalBinaryWrite(message.session, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CreateSessionCsNotify
 */
export const CreateSessionCsNotify = new CreateSessionCsNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteSessionCsNotify$Type extends MessageType<DeleteSessionCsNotify> {
    constructor() {
        super("DeleteSessionCsNotify", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteSessionCsNotify>): DeleteSessionCsNotify {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteSessionCsNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteSessionCsNotify): DeleteSessionCsNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteSessionCsNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DeleteSessionCsNotify
 */
export const DeleteSessionCsNotify = new DeleteSessionCsNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSessionsCsNotify$Type extends MessageType<UpdateSessionsCsNotify> {
    constructor() {
        super("UpdateSessionsCsNotify", [
            { no: 1, name: "sessions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Player }
        ]);
    }
    create(value?: PartialMessage<UpdateSessionsCsNotify>): UpdateSessionsCsNotify {
        const message = { sessions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateSessionsCsNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSessionsCsNotify): UpdateSessionsCsNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Player sessions */ 1:
                    message.sessions.push(Player.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateSessionsCsNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Player sessions = 1; */
        for (let i = 0; i < message.sessions.length; i++)
            Player.internalBinaryWrite(message.sessions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UpdateSessionsCsNotify
 */
export const UpdateSessionsCsNotify = new UpdateSessionsCsNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestSessionScNotify$Type extends MessageType<RequestSessionScNotify> {
    constructor() {
        super("RequestSessionScNotify", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "lifetime", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RequestSessionScNotify>): RequestSessionScNotify {
        const message = { username: "", lifetime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RequestSessionScNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestSessionScNotify): RequestSessionScNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* int64 lifetime */ 2:
                    message.lifetime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestSessionScNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* int64 lifetime = 2; */
        if (message.lifetime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.lifetime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RequestSessionScNotify
 */
export const RequestSessionScNotify = new RequestSessionScNotify$Type();
